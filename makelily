#!/usr/bin/python
import codecs, os, string, sys
from optparse import OptionParser

class MakeLily:
    # Path constants
    editor = 'mate'
    script_path = os.path.expanduser('~/Documents/Music/Bagpipe')
    lilypond = 'lilypond'

    def __init__(self):
        # Gather options and create the template file

        usage = 'makelily.py [options] music-file.ly'
        parser = OptionParser(usage)
        parser.add_option('-@', '--list-file',
                          action='store', type='string', dest='list_file', default='')
        parser.add_option('-s', '--staff-size',
                          action='store', type='string', dest='staffsize', default='16')
        parser.add_option('-p', '--paper-size',
                          action='store', type='string', dest='papersize', default='a4')
        parser.add_option('-l', '--landscape',
                          action='store_const', const='landscape', dest='paperdir', default='portrait')
        parser.add_option('-f', '--format',
                          action='store', type='string', dest='format', default='format')
        parser.add_option('-v', '--version',
                          action='store_true', dest='show_version', default=False)
        parser.add_option('-w', '--view-spacing',
                          action='store_true', dest='view_spacing', default=False)
        parser.add_option('-o', '--open-pdf',
                          action='store_true', dest='open_pdf', default=False)

        (self.options, self.args) = parser.parse_args()

        if self.options.show_version:
            print os.system(self.lilypond+' --version')
            return
            
        if self.options.view_spacing:
            self.options.view_spacing = "##t"
        else:
            self.options.view_spacing = "##f"

        if self.options.list_file != '':
            self.args = open(self.options.list_file, 'r').readlines()

        cwd = os.getcwd()
        os.chdir(self.script_path)

        for file_path in self.args:
            self.processit(file_path.strip())

        os.chdir(cwd)

    def processit(self, file_path):

        file_path = os.path.abspath(os.path.expanduser(file_path))
        rel_file_path = file_path.replace(self.script_path, '')
        rel_dir = os.path.dirname(rel_file_path)
        rel_dir = rel_dir.replace('/', '')
        (file_base, _) = os.path.splitext(os.path.basename(rel_file_path))
        out_path = os.path.join(self.script_path, '_output', rel_dir)

        # The output file header
        out = u"""
% Generated from """+file_path+""" by makelily.py

\\version "2.11.43"

#(ly:set-option 'point-and-click #f)

#(set-global-staff-size """+self.options.staffsize+""")
#(set-default-paper-size \""""+self.options.papersize+"""\" '"""+self.options.paperdir+""")

\\include "bagpipe.ly"
\\include "./bagpipe_extra.ly"
\\include "./"""+self.options.format+""".ly"

% Local tweaks
\\paper {
    annotatespacing = """+self.options.view_spacing+"""
    ragged-bottom = ##t
}

% The tune to generate.
"""
        # Run Lilypond to produce output

        print 'Processing "'+os.path.join(rel_dir, file_base)+'.ly"'
        print '  Creating preview file'
        self.maketemplate(file_base, file_path, out, 1)
        is_ok = os.system(self.lilypond+' -dpreview -dresolution=84 -dpreview-include-book-title -dwithout-comment '+file_base+'.ly > '+file_base+'.log 2>&1') == 0
        if is_ok:
            print '  Creating PDF'
            self.maketemplate(file_base, file_path, out, 0)
            is_ok = os.system(self.lilypond+' --pdf '+file_base+'.ly > '+file_base+'.log 2>&1') == 0
        
        # Move the output to the correct directories and delete temp files

        print '  Cleaning up'
        try: os.makedirs(out_path)
        except: pass
        try: os.remove(os.path.join(out_path, file_base+'.pdf'))
        except: pass
        try: os.remove(os.path.join(out_path, file_base+'.preview.png'))
        except: pass
        try: os.rename(os.path.join(self.script_path, file_base+'.pdf'), os.path.join(out_path, file_base+'.pdf'))
        except: pass
        try: os.rename(os.path.join(self.script_path, file_base+'.preview.png'), os.path.join(out_path, file_base+'.preview.png'))
        except: pass
        try: os.remove(os.path.join(self.script_path, file_base+'.ly'))
        except: pass
        try: os.remove(os.path.join(self.script_path, file_base+'.ps'))
        except: pass
        try: os.remove(os.path.join(self.script_path, file_base+'.preview.eps'))
        except: pass
        try: os.remove(os.path.join(self.script_path, file_base+'.preview.pdf'))
        except: pass
        if is_ok:
            try:
                os.remove(os.path.join(self.script_path, file_base+'.log'))
                if self.options.open_pdf:
                    self.openpdf(os.path.join(out_path, file_base+'.pdf'))
            except: pass
        else:
            os.system(self.editor+' '+file_base+'.log')

    # Read the included music file and append it to our template.
    # If minimal is set, skip lines between
    # %%% START SKIP / %%% END SKIP markers
    # We assume all files are UTF8 encoded.
    def maketemplate(self, file_base, file, template, minimal):
        out_file = codecs.open(file_base+'.ly', 'w', 'utf8')
        out_file.write(u'\ufeff')
        out_file.write(template)
        music = codecs.open(file, 'r', 'utf8').read()
        if music.startswith(u'\ufeff'): music = music[1:]
        music = music.split(u'\n')
        printit = 1
        for line in music:
            if minimal:
                if line.startswith(u'%%% START SKIP'): printit = 0
                if line.startswith(u'%%% END SKIP'): printit = 1
            if printit:
                out_file.write(line.replace('\r', '')+'\n')
        out_file.close()

    def openpdf(self, pdf):
        print '  Opening PDF'
        os.system('open -a Preview.app '+pdf)

# Create an object and start the processing
MakeLily()

